{% extends 'StcBundle::base.html.twig' %}

{% block title %}
    Jouer
{% endblock %}

{% block content %}
    <main id="plateau" class="container-fluid visible-lg">

        <div class="row">

            <div id="fond"></div>
            <div id="nuages"></div>

            <!-- Plateau -->
            <div id="tableau">
                {{ render(controller ('StcBundle:Game:controls', { 'idGame' : game.id })) }}
            </div>
            <!-- /Plateau -->
        </div>

        <!-- Indications -->
        <div id="indications" class="row">
            <div class="col-lg-1 col-lg-offset-2">
                <span class="glyphicon glyphicon-arrow-left"></span> Q
            </div>
            <div class="col-lg-1">
                <span class="glyphicon glyphicon-arrow-right"></span> D
            </div>
            <div class="col-lg-1">
                <span class="glyphicon glyphicon-arrow-up"></span> Z
            </div>
            <div class="col-lg-1">
                <span class="glyphicon glyphicon-arrow-down"></span> S
            </div>
            <div class="col-lg-2 col-lg-offset-1">
                Espace <span class="glyphicon glyphicon-chevron-up"></span>
            </div>
        </div>
        <!-- /Indications -->
    </main>

    <audio src="{{ asset('sons/music.mp3') }}" autoplay loop></audio>

    <!-- Résolution trop faible -->
    <main class="hidden-lg text-center">
        <h1>
            Vous n'avez pas la résolution nécessaire pour jouer à ce jeu.
        </h1>
        <p><a href="index.html">Retourner à l'accueil.</a></p>
    </main>
    <!-- /Résolution trop faible -->

    <script>
        // variable qui va recevoir la balise img pour l'animation de tir
        var imgTir;
        // booléen utilisé afin d'empécher l'empilement des déplacements en mémoire
        var moveInProgress = false;
        // variable de la distance entre le bloc couleur et l'avion utilisée pour le tir missile
        var distanceTir;


        {% if dategame is not null %}
            var time = '{{ dategame}}';
            if (time != null) {
                var currentTime = new Date(time);
                var pageTimer = setInterval(tick, 50);
                tick();
            }

            function tick() {
                var diff = new Date(new Date() - currentTime).toISOString().substr(11, 8);
                $('#timer').html(diff);
            }
        {% endif %}

            $('body').keypress(function (e) {

                e.preventDefault();
                var gameWaiting = document.getElementById('#loading');
                if (moveInProgress || gameWaiting) {
                    return;
                }

                switch (e.charCode) {
                    case 113:
                        moveInProgress = true;
                        // animate du déplacement, on cré une variable recevant une balise img
                        imgDeplace = $('<img />', {
                            'src': '{{asset('images/avion.png')}}',
                            'style': '  left: -26px; position:absolute;'
                        });
                        // on remplace la balise img my-plane par notre balise temp que l'on va animate
                        $('.avion.my-plane').html(imgDeplace);
                        imgDeplace.animate({"left": "-=69px"}, 200);
                        $.ajax({
                            url: '{{ path("controls", {"idGame" : game.id, "action" : "left"}) }}',
                            success: refreshTable
                        });
                        break;
                    case 100:
                        moveInProgress = true;
                        // animate du déplacement
                        imgDeplace = $('<img />', {
                            'src': '{{asset('images/avion.png')}}',
                            'style': '  left: -26px; position:absolute;'
                        });
                        $('.avion.my-plane').html(imgDeplace);
                        imgDeplace.animate({"left": "+=65px"}, 200);
                        $.ajax({
                            url: '{{ path("controls", {"idGame" : game.id, "action" : "right"}) }}',
                            success: refreshTable
                        });
                        break;
                    case 122:
                        moveInProgress = true;
                        // animate du déplacement
                        imgDeplace = $('<img />', {
                            'src': '{{asset('images/avion.png')}}',
                            'style': '  left: -27px; position:absolute;'
                        });
                        $('.avion.my-plane').html(imgDeplace);
                        imgDeplace.animate({"top": "-=30px"}, 200);
                        $.ajax({
                            url: '{{ path("controls", {"idGame" : game.id, "action" : "up"}) }}',
                            success: refreshTable
                        });
                        break;
                    case 115:
                        moveInProgress = true;
                        // animate du déplacement
                        imgDeplace = $('<img />', {
                            'src': '{{asset('images/avion.png')}}',
                            'style': '  left: -27px; position:absolute;'
                        });
                        $('.avion.my-plane').html(imgDeplace);
                        imgDeplace.animate({"top": "+=30px"}, 200);
                        $.ajax({
                            url: '{{ path("controls", {"idGame" : game.id, "action" : "down"}) }}',
                            success: refreshTable
                        });
                        break;
                    case 32:
                        moveInProgress = true;

                        var weapon = null;
                        if ($('#powers .power-laser').length > 0) {
                            weapon = 'laser';
                        }

                        console.log(weapon);

                        switch (weapon) {
                            case 'laser':
                                //On cré la variable imgTir qui va contenir la balise img laser à injecter au DOM
                                imgTir = $('<img />', {
                                    'src': '{{asset('images/laser.png')}}',
                                    'style': '  left: 0px; position:absolute; z-index: 1;'
                                });
                                console.log(imgTir);
                                break;

                            default:
                                //On cré la variable imgTir qui va contenir la balise img missile à injecter au DOM
                                imgTir = $('<img />', {
                                    'src': '{{asset('images/missile_petit.png')}}',
                                    'style': '  left: 25px; position:absolute; z-index: 1;'
                                });
                                break;

                        }
                        imgTir.appendTo($('.avion.my-plane'));

                        // tir sur ennemi ou jusqu'au bout du plateau ou jusqu'au bloc
                        var distanceTir = distance(weapon);

                        switch (weapon) {
                            case 'laser':
                                console.log("animate laser");
                                imgTir.animate({"top": "-=" + distanceTir + "px"}, 75, "linear");
                                break;

                            default:
                                imgTir.animate({"top": "-=" + distanceTir + "px"}, 75, "linear",
                                        function () {
                                            imgTir.attr({'src': '{{asset('images/bang.png')}}', 'style': 'left:12px; top: -' + distanceTir + 'px;'});
                                        }
                                );
                                break;
                        }

                        $.ajax({
                            url: '{{ path("controls", {"idGame" : game.id, "action" : "shoot"}) }}',
                            success: refreshTable
                        });
                        break;
                }
            });
            // function de calcul de la distance de tir
            function distance(weapon) {

                var planePosx = $('.my-plane').attr('data-x');
                var planePosy = $('.my-plane').attr('data-y');
                var enemyTabPlaneCol = $(".enemy[data-x='" + planePosx + "']");
                var firstEnnemy = null;
                var diffPosyMin = 20;
                // les différentes distances que la fonction peut renvoyer
                var distanceMax = ($('.avion.my-plane').offset().top - $('tr:nth-child(1)').offset().top) + 3;
                var distanceBloc = ($('.avion.my-plane').offset().top - $('tr:nth-child(3)').offset().top) + 3;
                var distanceEnnemi = null;

                switch (weapon) {
                    case 'laser':
                        console.log("distance laser");
                        if ($('#tableau td:nth-child(3).my-plane').length === 1 || $('#tableau td:nth-child(6).my-plane').length === 1 ||
                                $('#tableau td:nth-child(10).my-plane').length === 1 || $('#tableau td:nth-child(13).my-plane').length === 1) {
                            return distanceBloc - 65;
                        } else {
                            return distanceMax - 65;
                        }
                        break;

                    default:
                        // pour chaque ennemis dans la colonne de l'avion
                        enemyTabPlaneCol.each(function () {
                            diffPosy = planePosy - $(this).attr('data-y');

                            // Si l'ennemi est au dessus de l'avion et plus proche sur la colonne
                            if (diffPosy > 0 && (diffPosy < diffPosyMin)) {
                                diffPosyMin = diffPosy;
                                firstEnnemy = $(this);
                            }
                        });
                        // si on tire sur l'ennemi le plus proche
                        if (firstEnnemy !== null) {
                            return distanceEnnemi = diffPosyMin * 30;
                            // sinon on tire sur un bloc ou dans le vide
                        } else {
                            // sélecteur complexe : pour chaque tr (ligne), récupère les 3è td (cellules) dont la classe est
                            // my-plane => si on en trouve une c'est que l'avion est en colonne 3! On restreint la longueur
                            // de tir car on a un bloc couleur sur cette colonne.
                            if ($('#tableau td:nth-child(3).my-plane').length === 1 || $('#tableau td:nth-child(6).my-plane').length === 1 ||
                                    $('#tableau td:nth-child(10).my-plane').length === 1 || $('#tableau td:nth-child(13).my-plane').length === 1) {
                                return distanceBloc;
                            } else {
                                return distanceMax;
                            }
                        }
                        break;
                }
            }

            function refreshTable(view) {
                moveInProgress = false;
                $('#tableau').html(view);
            }

            var pageRefresh = setInterval(function () {
                $('#tableau').load('{{ path("controls", {"idGame" : game.id, "action" : "null"}) }}');
            }, 1000);


    </script>

{% endblock %}
